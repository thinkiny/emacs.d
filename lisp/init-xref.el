(require 'xref)

(setq xref-prompt-for-identifier nil)
(defun xref-find-last-match(marker)
  (let ((idx (- (ring-length xref--marker-ring) 1))
        (found nil))
    (while (and (not found) (> idx 1))
      (if (equal (ring-ref xref--marker-ring idx) marker)
          (setq found t)
        (setq idx (- idx 1))))
    idx))

(defun xref-pop-curr-marker-stack ()
  "Pop back to where \\[xref-find-definitions] was last invoked."
  (interactive)
  (let ((ring xref--marker-ring))
    (when (ring-empty-p ring)
      (user-error "Marker stack is empty"))
    (let* ((idx (- (xref-find-last-match (mark-marker)) 1))
           (before (ring-remove ring idx))
           (marker (ring-remove ring idx)))
      (set-marker before nil nil)
      (switch-to-buffer (or (marker-buffer marker)
                            (user-error "The marked buffer has been deleted")))
      (goto-char (marker-position marker))
      (set-marker marker nil nil)
      (run-hooks 'xref-after-return-hook))))

(setq xref-marker-ring-length 10240)
(defun xref-push-marker-stack-once(&rest _) (xref--push-markers))
(defun xref-push-marker-stack-twice(&rest _)
  (xref--push-markers)
  (xref--push-markers))

(defun xref-pop-marker-stack-maybe(&rest _)
  (when (get-buffer-window xref-buffer-name)
    (ring-remove xref--marker-ring 0)))

(defun print-xref()
  (interactive)
  (let ((i 0)
        (n (ring-length xref--marker-ring)))
    (while (< i n)
      (prin1 (ring-ref xref--marker-ring i))
      (setq i (+ i 1)))))

(advice-add 'xref--goto-char :before #'xref-push-marker-stack-once)
(advice-add 'xref--goto-char :after #'xref-push-marker-stack-once)
(advice-add 'counsel-imenu-action :before #'xref-push-marker-stack-twice)
(advice-add 'counsel-imenu-action :after #'xref-push-marker-stack-once)
(advice-add 'minibuffer-keyboard-quit :before #'xref-pop-marker-stack-maybe)

(global-set-key (kbd "M-[") #'xref-pop-curr-marker-stack)
(global-set-key (kbd "M-,") #'xref-find-references)

(provide 'init-xref)
